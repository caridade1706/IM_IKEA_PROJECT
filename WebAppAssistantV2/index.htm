<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IKEA Assistant</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
    <style>
        body {
            background: #fff;
            min-height: 100vh;
            font-family: Poppins, sans-serif;
            margin: 0;
            padding: 20px;
            color: #4F5D73;
        }
        h1 {
            text-align: center;
            background-color: #4F5D73;
            color: white;
            padding: 10px;
        }
        .container {
            max-width: 600px;
            margin: 20px auto;
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        #transcript {
            font-size: 18px;
            color: #2E8B57;
            margin-bottom: 10px;
        }
        #transcript-history {
            list-style-type: none;
            padding: 0;
            margin: 0;
            max-height: 200px;
            overflow-y: auto;
            border-top: 1px solid #ccc;
            margin-top: 10px;
        }
        #transcript-history li {
            padding: 8px;
            background: #f9f9f9;
            border-bottom: 1px solid #eee;
            font-size: 16px;
            color: #333;
        }
    </style>
</head>
<body>
    <h1>IKEA Assistant</h1>
    <div class="container">
        <p id="instruction">Diga "Olá IKEA" para ativar os comandos.</p>
        <div id="transcript">Aguardando palavra de ativação...</div>
        <ul id="transcript-history"></ul>
    </div>

    <script>
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const wakeUpRecognition = new SpeechRecognition();
        const commandRecognition = new SpeechRecognition();
        wakeUpRecognition.lang = 'pt-PT';
        commandRecognition.lang = 'pt-PT';
        commandRecognition.continuous = true;

        const transcriptDiv = document.getElementById('transcript');
        const transcriptHistory = document.getElementById('transcript-history');

        let isListeningForCommands = false;
        const wakeUpWord = "olá ikea";

        // Função para iniciar o reconhecimento da palavra de ativação
        function startWakeUpRecognition() {
            if (!isListeningForCommands) {
                wakeUpRecognition.start();
                transcriptDiv.textContent = "Aguardando palavra de ativação...";
            }
        }

        // Quando detecta algo no wake-up recognition
        wakeUpRecognition.onresult = (event) => {
            const transcript = event.results[event.results.length - 1][0].transcript.toLowerCase().trim();
            console.log("Wake-up heard:", transcript);

            if (transcript.includes(wakeUpWord)) {
                isListeningForCommands = true;
                transcriptDiv.textContent = "Ativado! Diga um comando.";
                wakeUpRecognition.stop();
                startCommandRecognition();
            }
        };

        wakeUpRecognition.onerror = (event) => {
            console.error("Erro no wake-up recognition:", event.error);
            startWakeUpRecognition(); // Reinicia a escuta da palavra de ativação
        };

        wakeUpRecognition.onend = () => {
            if (!isListeningForCommands) {
                startWakeUpRecognition(); // Continua ouvindo para a palavra de ativação
            }
        };

        // Inicia o reconhecimento de comandos
        function startCommandRecognition() {
            commandRecognition.start();
            transcriptDiv.textContent = "Estou ouvindo comandos...";
        }

        // Quando detecta comandos
        commandRecognition.onresult = async (event) => {
            let currentTranscript = "";
            for (let i = event.resultIndex; i < event.results.length; ++i) {
                if (event.results[i].isFinal) {
                    currentTranscript = event.results[i][0].transcript.trim();

                    // Exibir no histórico
                    const li = document.createElement('li');
                    li.textContent = "Comando: " + currentTranscript;
                    transcriptHistory.appendChild(li);

                    // Atualizar a transcrição final
                    transcriptDiv.textContent = "Entendido: " + currentTranscript;

                    // Enviar comando para o backend (IKEA)
                    await sendToBackend(currentTranscript);

                    // Parar de escutar comandos e voltar para o wake-up
                    isListeningForCommands = false;
                    commandRecognition.stop();
                    startWakeUpRecognition();
                }
            }
        };

        commandRecognition.onerror = (event) => {
            console.error("Erro de reconhecimento de comandos:", event.error);
            isListeningForCommands = false; // Resetar para o estado de ativação
            commandRecognition.stop();
            startWakeUpRecognition();
        };

        commandRecognition.onend = () => {
            if (isListeningForCommands) {
                commandRecognition.start(); // Continua ouvindo comandos
            } else {
                startWakeUpRecognition(); // Volta a ouvir para a palavra de ativação
            }
        };

        async function sendToBackend(command) {
            try {
                const response = await fetch('http://localhost:5005/webhooks/rest/webhook', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sender: "user", message: command })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log("Resposta do Rasa:", result);

                if (result.length > 0) {
                    // Adicionar resposta no histórico
                    const li = document.createElement('li');
                    li.textContent = "Resposta do IKEA: " + result[0].text;
                    transcriptHistory.appendChild(li);

                    // Falar a resposta do backend
                    speak(result[0].text);
                } else {
                    const li = document.createElement('li');
                    li.textContent = "Resposta do IKEA: Não entendi o comando.";
                    transcriptHistory.appendChild(li);
                    speak("Desculpe, não entendi o comando.");
                }
            } catch (error) {
                console.error("Erro ao comunicar com o backend:", error);
                const li = document.createElement('li');
                li.textContent = "Erro ao processar comando.";
                transcriptHistory.appendChild(li);
                speak("Houve um erro ao processar o comando.");
            }
        }

        function speak(text) {
            const msg = new SpeechSynthesisUtterance();
            msg.text = text;
            msg.lang = "pt-PT";
            window.speechSynthesis.speak(msg);
        }

        // Iniciar reconhecimento da palavra de ativação
        startWakeUpRecognition();
    </script>
</body>
</html>
