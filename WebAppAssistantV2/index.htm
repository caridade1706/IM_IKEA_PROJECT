<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IKEA Assistant</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            text-align: center;
        }
        #response {
            margin-top: 20px;
            padding: 10px;
            border: 2px solid #4CAF50;
            background: #fff;
            color: #4CAF50;
            font-size: 18px;
            display: inline-block;
        }
        #result {
            margin-top: 20px;
            padding: 10px;
            border: 2px solid #2196F3;
            background: #fff;
            color: #2196F3;
            font-size: 18px;
            display: none;
        }
    </style>
</head>
<body>
    <h1>IKEA Voice Assistant</h1>
    <p>The assistant is listening for the wake-up word "Olá IKEA".</p>
    <div id="response">Listening for wake-up word...</div>
    <div id="result"></div>

    <script>
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.lang = 'pt-PT';
        recognition.continuous = false; // Escuta comando por vez
        recognition.interimResults = false;

        const wakeUpRecognition = new SpeechRecognition();
        wakeUpRecognition.lang = 'pt-PT';
        wakeUpRecognition.continuous = true; // Escuta continuamente pela wake-up word
        wakeUpRecognition.interimResults = false;

        const wakeUpWord = "olá ikea";
        const responseDiv = document.getElementById('response');
        const resultDiv = document.getElementById('result');
        let isListeningForCommands = false;

        // Escutar pela wake-up word
        function startWakeUpRecognition() {
            try {
                if (!isListeningForCommands && wakeUpRecognition) {
                    wakeUpRecognition.start();
                    responseDiv.textContent = "Listening for wake-up word...";
                }
            } catch (e) {
                console.error("Error starting wake-up recognition:", e.message);
            }
        }

        wakeUpRecognition.onresult = (event) => {
            const transcript = event.results[event.results.length - 1][0].transcript.toLowerCase();
            console.log(`Heard: ${transcript}`);

            if (transcript.includes(wakeUpWord) && !isListeningForCommands) {
                responseDiv.textContent = "Activated. Listening for commands...";
                isListeningForCommands = true;

                // Parar a escuta da wake-up word e iniciar a escuta para comandos
                wakeUpRecognition.stop();
                startListeningForCommands();
            }
        };

        wakeUpRecognition.onerror = (event) => {
            console.error(`Wake-up Recognition Error: ${event.error}`);
            if (!isListeningForCommands) {
                setTimeout(startWakeUpRecognition, 1000); // Reiniciar caso haja erro
            }
        };

        function startListeningForCommands() {
            try {
                recognition.start();
            } catch (e) {
                console.error("Error starting command recognition:", e.message);
            }

            recognition.onresult = async (event) => {
                const command = event.results[event.results.length - 1][0].transcript.toLowerCase();
                console.log(`Command: ${command}`);
                responseDiv.textContent = "Processing command...";

                await sendToBackend(command);

                // Voltar para o modo de escuta da wake-up word
                isListeningForCommands = false;
                startWakeUpRecognition();
            };

            recognition.onerror = (event) => {
                console.error(`Command Recognition Error: ${event.error}`);
                responseDiv.textContent = "Error processing command. Listening for wake-up word...";
                isListeningForCommands = false;
                startWakeUpRecognition();
            };

            recognition.onend = () => {
                if (isListeningForCommands) {
                    recognition.start(); // Continuar no modo de escuta de comandos até o processamento
                }
            };
        }

        async function sendToBackend(command) {
            try {
                const response = await fetch('http://localhost:5005/webhooks/rest/webhook', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sender: "user", message: command })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log("Resposta do Rasa:", result);

                if (result.length > 0) {
                    // Mostrar resultado em uma div separada
                    resultDiv.style.display = "block";
                    resultDiv.textContent = result[0].text;
                } else {
                    resultDiv.style.display = "block";
                    resultDiv.textContent = "Não recebi uma resposta do servidor.";
                }
            } catch (error) {
                console.error("Error communicating with backend:", error);
                resultDiv.style.display = "block";
                resultDiv.textContent = "Erro ao processar comando.";
            }
        }

        // Iniciar escuta da wake-up word
        startWakeUpRecognition();
    </script>
</body>
</html>
